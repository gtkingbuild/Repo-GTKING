<?xml version="1.0" encoding="UTF-8"?>
<includes>

    <include name="Home_Menu_Content">
        <param name="condition">$EXP[Exp_HomeMenu_IsExpanded]</param>
        <definition>
            <include content="Object_ContentNested" condition="$PARAM[condition]">
                <include>skinvariables-sidemenu-staticitems</include>
            </include>
            <include content="Object_ContentNested" condition="![$PARAM[condition]]">
                <include>skinvariables-sidemenu-staticbutton-primary</include>
                <include>skinvariables-sidemenu-staticbutton-secondary</include>
            </include>
        </definition>
    </include>

    <include name="Home_Menu_ProfileButton">
        <definition>
            <control type="group">
                <centertop>100</centertop>
                <centerleft>100</centerleft>
                <height>50</height>
                <width>50</width>
                <control type="button" id="308">
                    <texturenofocus />
                    <include>Texture_KeyboardButton</include>
                    <ondown>SetFocus(303,0,absolute)</ondown>
                    <onup>309</onup>
                    <onleft>Close</onleft>
                    <onright>Close</onright>
                    <onclick>Close</onclick>
                    <onclick condition="Skin.HasSetting(SkinUserLogin.Disabled)">System.LogOff</onclick>
                    <onclick condition="!Skin.HasSetting(SkinUserLogin.Disabled)">ActivateWindow(1195)</onclick>
                    <width>80</width>
                    <height>80</height>
                    <centerleft>50%</centerleft>
                    <centertop>50%</centertop>
                </control>
                <control type="image">
                    <include content="Dimension_Padding">
                        <param name="pad">-40</param>
                    </include>
                    <bordersize>40</bordersize>
                    <bordertexture colordiffuse="shadow_soft">shadows/circle_50-shadow-40.png</bordertexture>
                    <texture colordiffuse="panel_fg_100">diffuse/circle_50.png</texture>
                </control>
                <include content="Object_InfoCircle_Image">
                    <param name="colordiffuse">white</param>
                    <param name="icon">$VAR[Image_ProfileThumb]</param>
                </include>
            </control>
        </definition>
    </include>

    <include name="Home_Menu_List_OnUp_Home">
        <onup condition="Skin.String(Home.SideMenuCollapse,Topbar)">370</onup>
        <onup condition="Skin.String(Home.SideMenuCollapse,Always)">SetProperty(List.ViewContainer.Prev,$INFO[Window.Property(List.ViewContainer)])</onup>
        <onup condition="Skin.String(Home.SideMenuCollapse,Always)">SetProperty(List.ViewContainer,$PARAM[id])</onup>
        <onup condition="Skin.String(Home.SideMenuCollapse,Always)">SetFocus(333)</onup>
    </include>

    <include name="Home_Menu_List_OnUp_Search">
        <onup>9099</onup>
    </include>

    <include name="Home_Menu_List_OnUp_Discover">
        <onup>67</onup>
    </include>

    <include name="Home_Menu_List_OnUp_Previous">
        <onup>PreviousMenu</onup>
    </include>

    <include name="Home_Menu_List_OnUp_Bump">
        <onup>SetProperty(List.ViewContainer.Prev,$INFO[Window.Property(List.ViewContainer)])</onup>
        <onup>SetProperty(List.ViewContainer,$PARAM[id])</onup>
        <onup>SetFocus(333)</onup>
    </include>

    <include name="Home_Menu_List_OnUp_ActivateSearch">
        <param name="property">ReverseTransition</param>
        <param name="condition">true</param>
        <definition>
            <onup condition="$PARAM[condition]">SetProperty(PreviousWindow,$VAR[Label_Header_Main],1185)</onup>
            <onup condition="$PARAM[condition]">SetProperty($PARAM[property],True,Home)</onup>
            <onup condition="$PARAM[condition]">AlarmClock(Clear$PARAM[property],ClearProperty($PARAM[property],Home),00:00,silent)</onup>
            <onup condition="$PARAM[condition]">ActivateWindow(1185)</onup>
        </definition>
    </include>

    <include name="Home_Menu_List_OnBackInfo">
        <oninfo condition="Window.IsMedia | Window.IsVisible(1105)">SetFocus(64)</oninfo>
        <oninfo condition="!Window.IsVisible(1105) + !Window.IsMedia">ActivateWindow(1170)</oninfo>
        <onback>CancelAlarm(SplashTimeOut,silent)</onback>
        <onback condition="Window.IsVisible(Home) + !Skin.HasSetting(Navigation.DisableOptionsOnBack)">SetFocus(308)</onback>
    </include>

    <include name="Home_Menu_List">
        <param name="items_include">Home_Menu_Content</param>
        <param name="onlist">320</param>
        <param name="id">303</param>
        <definition>
            <control type="group">
                <left>0</left>
                <top>260</top>
                <bottom>260</bottom>
                <width>view_side</width>

                <include content="Settings_Arrows">
                    <param name="arrow_prev_visible">Container($PARAM[id]).HasPrevious</param>
                    <param name="arrow_next_visible">Container($PARAM[id]).HasNext</param>
                    <param name="colordiffuse">main_fg_30</param>
                </include>

                <control type="list" id="$PARAM[id]">
                    <focusposition>2</focusposition>
                    <movement>2</movement>

                    <width>view_side</width>


                    <include content="Home_Menu_List_OnUp_Home" condition="!$EXP[Exp_HomeMenu_IsExpanded] + Window.IsVisible(Home)">
                        <param name="id">$PARAM[id]</param>
                    </include>
                    <include content="Home_Menu_List_OnUp_Bump" condition="!$EXP[Exp_HomeMenu_IsExpanded] + !Window.IsVisible(Home)">
                        <param name="id">$PARAM[id]</param>
                    </include>

                    <include>Home_Menu_List_OnBackInfo</include>
                    <onfocus>ClearProperty(WidgetGroup.Movement)</onfocus>
                    <onfocus>ClearProperty(SideMenu.CurrentItem)</onfocus>

                    <onfocus condition="Window.IsVisible(Home) + !String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock.OnFocus))">SetProperty(TMDbHelper.WidgetContainer.UpdateLock,True,1198)</onfocus>
                    <onfocus condition="Window.IsVisible(Home) + String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock.OnFocus))">SetProperty(TMDbHelper.WidgetContainer.UpdateLock.OnFocus,True,1198)</onfocus>

                    <onfocus condition="!String.IsEmpty(Window.Property(List.ViewContainer.Prev))">SetProperty(List.ViewContainer,$INFO[Window.Property(List.ViewContainer.Prev)])</onfocus>
                    <onfocus condition="!String.IsEmpty(Window.Property(List.ViewContainer.Prev))">ClearProperty(List.ViewContainer.Prev)</onfocus>

                    <include content="Action_HomeMenu_OnRightLeft">
                        <param name="onlist">$PARAM[onlist]</param>
                    </include>
                    <include content="Action_HomeMenu_OnDown" condition="!$EXP[Exp_HomeMenu_IsExpanded]">
                        <param name="onlist">$PARAM[onlist]</param>
                    </include>

                    <orientation>vertical</orientation>
                    <scrolltime tween="quadratic">400</scrolltime>

                    <include content="Home_Menu_List_ItemLayout" condition="Skin.HasSetting(Hub.Home.DisableSubmenu)">
                        <param name="id">$PARAM[id]</param>
                        <param name="hidden_button">Home_Menu_List_HiddenButton</param>
                        <param name="hidden_button_enabled">Window.IsVisible(Home)</param>
                    </include>
                    <include content="Home_Menu_List_ItemLayout" condition="!Skin.HasSetting(Hub.Home.DisableSubmenu)">
                        <param name="id">$PARAM[id]</param>
                        <param name="hidden_button">Home_Menu_List_HiddenButton_Alt</param>
                        <param name="hidden_button_enabled">[Window.IsVisible(Home) + $EXP[Exp_HomeMenu_IsExpanded]]</param>
                    </include>

                    <include>$PARAM[items_include]</include>
                </control>
            </control>
        </definition>
    </include>

    <include name="Home_Menu_List_HiddenButton">
        <control type="button">
            <visible allowhiddenfocus="true">false</visible>
            <animation effect="fade" start="0" end="0" time="100" reversible="false">Focus</animation>

            <!-- Reset Widget Group Position -->
            <!-- <include content="Action_Widgets_ResetPosition_OnFocus" condition="Skin.HasSetting(Hub.Home.WidgetSelector)">
                <param name="condition">String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))</param>
            </include> -->

            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock)) + Skin.HasSetting(Hub.Home.WidgetSelector)">SetFocus(419,0,absolute)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock)) + !Skin.HasSetting(Hub.Home.WidgetSelector)">SetFocus($INFO[ListItem.Property(widgets_first_id)])</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetFocus($VAR[Action_Hubs_MenuID])</onfocus>

            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetProperty(TMDbHelper.WidgetContainer,$INFO[ListItem.Property(widgets_first_id)],Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetProperty(Slide.WidgetContainer,$INFO[ListItem.Property(widgets_first_id)],Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(List.ViewContainer,Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(List.ViewContainer.Left,Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(List.ViewContainer.Prev,Home)</onfocus>

            <onfocus>AlarmClock(clearupdatelock,ClearProperty(TMDbHelper.WidgetContainer.UpdateLock,1198),00:00,silent)</onfocus>

        </control>
    </include>

    <include name="Home_Menu_List_HiddenButton_Alt">
        <control type="button">
            <visible allowhiddenfocus="true">false</visible>
            <animation effect="fade" start="0" end="0" time="100" reversible="false">Focus</animation>

            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetFocus(300,0,absolute)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetFocus(302,0,absolute)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock)) + Skin.HasSetting(Hub.Home.WidgetSelector)">SetFocus(419,0,absolute)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetFocus(311)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetFocus($VAR[Action_Hubs_MenuID])</onfocus>

            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetProperty(TMDbHelper.WidgetContainer,301,Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(Slide.WidgetContainer,Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">SetProperty(List.ViewContainer,$VAR[Path_Spotlight_Default_ViewContainer],Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(List.ViewContainer.Left,Home)</onfocus>
            <onfocus condition="String.IsEmpty(Window(1198).Property(TMDbHelper.WidgetContainer.UpdateLock))">ClearProperty(List.ViewContainer.Prev,Home)</onfocus>

            <onfocus>AlarmClock(clearupdatelock,ClearProperty(TMDbHelper.WidgetContainer.UpdateLock,1198),00:00,silent)</onfocus>
        </control>
    </include>

    <include name="Home_Menu_List_ItemLayout">
        <param name="layoutnf">[$EXP[Exp_HomeMenu_IsExpanded] + !Skin.HasSetting(Home.SideMenu.DisableIndicator) + !Window.IsVisible(1172) + Window.IsVisible(Home) + [Skin.HasSetting(Hub.Home.DisableSubmenu) + !Skin.HasSetting(Hub.Home.WidgetSelector) + !Skin.HasSetting(Hub.Home.DisableMoveBetweenGroups) + String.IsEqual(ListItem.Property(guid),Window.Property(SideMenu.CurrentGUID))]]</param>
        <param name="layoutfo">[$EXP[Exp_HomeMenu_IsExpanded] + !Skin.HasSetting(Home.SideMenu.DisableIndicator) + !Window.IsVisible(1172) + Window.IsVisible(Home) + [[Skin.HasSetting(Hub.Home.DisableSubmenu) + !Skin.HasSetting(Hub.Home.WidgetSelector) + !Skin.HasSetting(Hub.Home.DisableMoveBetweenGroups) + String.IsEqual(ListItem.Property(guid),Window.Property(SideMenu.CurrentGUID))] | !Skin.HasSetting(Hub.Home.DisableSubmenu) | Skin.HasSetting(Hub.Home.WidgetSelector) | Skin.HasSetting(Hub.Home.DisableMoveBetweenGroups)]]</param>
        <param name="altfocus">false</param>
        <definition>
            <itemlayout height="100" width="100">
                <control type="group">
                    <left>view_menu</left>
                    <top>40</top>
                    <bottom>-40</bottom>
                    <include content="Layout_Home_Menu">
                        <param name="selected">false</param>
                        <param name="detailed">Control.HasFocus($PARAM[id])</param>
                        <param name="layoutfo">$PARAM[layoutnf]</param>
                        <param name="vertical">$PARAM[vertical]</param>
                    </include>
                </control>
            </itemlayout>
            <focusedlayout height="100" width="100">
                <include condition="$PARAM[hidden_button_enabled]">$PARAM[hidden_button]</include>
                <control type="group">
                    <left>view_menu</left>
                    <top>40</top>
                    <bottom>-40</bottom>
                    <control type="group">
                        <visible>![Control.HasFocus($PARAM[id]) | $PARAM[altfocus]]</visible>
                        <include content="Layout_Home_Menu">
                            <param name="selected">false</param>
                            <param name="detailed">[Control.HasFocus($PARAM[id]) | $PARAM[altfocus]]</param>
                            <param name="layoutfo">$PARAM[layoutfo]</param>
                            <param name="vertical">$PARAM[vertical]</param>
                        </include>
                    </control>
                    <control type="group">
                        <visible>Control.HasFocus($PARAM[id]) | $PARAM[altfocus]</visible>
                        <include content="Layout_Home_Menu">
                            <param name="selected">true</param>
                            <param name="detailed">[Control.HasFocus($PARAM[id]) | $PARAM[altfocus]]</param>
                            <param name="layoutfo">$PARAM[layoutfo]</param>
                            <param name="vertical">$PARAM[vertical]</param>
                        </include>
                    </control>
                </control>
            </focusedlayout>
        </definition>
    </include>

    <include name="Home_Menu_Button_Back">
        <control type="button" id="$PARAM[id]">
            <texturenofocus />
            <include>Texture_KeyboardButton</include>
            <include content="Dimension_Padding">
                <param name="pad">-20</param>
            </include>
            <nested />
        </control>
    </include>

    <include name="Home_Menu_Button_Icon">
        <param name="focused">$EXP[Exp_HomeMenu_HasFocus]</param>
        <param name="color_nf">main_fg_30</param>
        <definition>
            <control type="group">
                <nested />
                <width>40</width>
                <height>40</height>
                <control type="image">
                    <aspectratio>keep</aspectratio>
                    <bordersize>icon_home_bordersize</bordersize>
                    <texture colordiffuse="$PARAM[color_nf]">$PARAM[icon]</texture>
                    <visible>!Control.HasFocus($PARAM[id])</visible>
                </control>
                <control type="image">
                    <aspectratio>keep</aspectratio>
                    <bordersize>icon_home_bordersize</bordersize>
                    <texture colordiffuse="$VAR[ColorSelected]">$PARAM[icon]</texture>
                    <visible>Control.HasFocus($PARAM[id])</visible>
                </control>
            </control>
        </definition>
    </include>

    <include name="Home_Fade">
        <param name="visible">!$EXP[Exp_InfoDialogs]</param>
        <definition>
            <control type="image">
                <visible>$PARAM[visible]</visible>
                <left>0</left>
                <width>400</width>
                <texture border="0,0,400,0" colordiffuse="main_bg_70">common/dim-side-half.png</texture>
                <visible>!Skin.HasSetting(Views.DisableItemPeek)</visible>
            </control>
        </definition>
    </include>

    <include name="Home_Menu_Fade_Labels">
        <control type="group">
            <width>480</width>
            <visible>$EXP[Exp_HomeMenu_HasFocus]</visible>
            <include content="Animation_Slide_In">
                <param name="type">Visible</param>
                <param name="posx">-80</param>
            </include>
            <include content="Animation_Slide_Out">
                <param name="type">Hidden</param>
                <param name="posx">-80</param>
            </include>
            <include content="Animation_Slide_In" condition="Window.IsActive(1172)">
                <param name="type">WindowOpen</param>
                <param name="posx">-80</param>
            </include>
            <include content="Animation_Slide_Out" condition="Window.IsActive(1172)">
                <param name="type">WindowClose</param>
                <param name="posx">-80</param>
            </include>

            <!-- <include content="Object_Dim_Side">
                <param name="flipx">false</param>
                <left>-320</left>
                <right>-240</right>
            </include> -->
            <control type="image">
                <right>-1080</right>
                <texture colordiffuse="$VAR[ColorBackgroundFade]">common/dim-thick-side-full.png</texture>
            </control>
            <control type="image">
                <right>-540</right>
                <texture colordiffuse="$VAR[ColorBackgroundFade]">common/dim-thick-side-full.png</texture>
            </control>
        </control>
        <control type="grouplist">
            <top>320</top>
            <left>80</left>
            <orientation>vertical</orientation>
            <animation effect="slide" end="0,-100" time="400" tween="quadratic" reversible="false" condition="Container(303).OnScrollNext">Conditional</animation>
            <animation effect="slide" end="0,100" time="400" tween="quadratic" reversible="false" condition="Container(303).OnScrollPrevious">Conditional</animation>
            <control type="group">
                <height>100</height>
                <include content="Layout_Home_Menu_Label">
                    <param name="detailed">true</param>
                    <param name="selected">[Control.HasFocus(303) + String.IsEqual(Container(303).ListItemPosition(0).CurrentItem,Container(303).ListItem.CurrentItem)]</param>
                    <param name="label">$INFO[Container(303).ListItemPosition(0).Label]</param>
                </include>
            </control>
            <control type="group">
                <height>100</height>
                <include content="Layout_Home_Menu_Label">
                    <param name="detailed">true</param>
                    <param name="selected">[Control.HasFocus(303) + String.IsEqual(Container(303).ListItemPosition(1).CurrentItem,Container(303).ListItem.CurrentItem)]</param>
                    <param name="label">$INFO[Container(303).ListItemPosition(1).Label]</param>
                </include>
            </control>
            <control type="group">
                <height>100</height>
                <include content="Layout_Home_Menu_Label">
                    <param name="detailed">true</param>
                    <param name="selected">[Control.HasFocus(303) + String.IsEqual(Container(303).ListItemPosition(2).CurrentItem,Container(303).ListItem.CurrentItem)]</param>
                    <param name="label">$INFO[Container(303).ListItemPosition(2).Label]</param>
                </include>
            </control>
            <control type="group">
                <height>100</height>
                <include content="Layout_Home_Menu_Label">
                    <param name="detailed">true</param>
                    <param name="selected">[Control.HasFocus(303) + String.IsEqual(Container(303).ListItemPosition(3).CurrentItem,Container(303).ListItem.CurrentItem)]</param>
                    <param name="label">$INFO[Container(303).ListItemPosition(3).Label]</param>
                </include>
            </control>
            <control type="group">
                <height>100</height>
                <include content="Layout_Home_Menu_Label">
                    <param name="detailed">true</param>
                    <param name="selected">[Control.HasFocus(303) + String.IsEqual(Container(303).ListItemPosition(4).CurrentItem,Container(303).ListItem.CurrentItem)]</param>
                    <param name="label">$INFO[Container(303).ListItemPosition(4).Label]</param>
                </include>
            </control>
        </control>
    </include>

    <include name="Home_Menu">
        <control type="group">
            <visible>!$EXP[Exp_InfoDialogs]</visible>
            <control type="group">

                <include content="Home_Menu_List">
                    <param name="onlist">$PARAM[onlist]</param>
                    <param name="window_id">$PARAM[window_id]</param>
                </include>

            </control>
        </control>
    </include>


</includes>
